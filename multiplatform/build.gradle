plugins {
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'dev.huskuraft.fuse'

    ext['fuse_fabric'] = findProject(":fabric:mc-${minecraft_version.replace(".", "-")}") != null
    ext['fuse_quilt'] = findProject(":fabric:mc-${minecraft_version.replace(".", "-")}") != null
    ext['fuse_forge'] = findProject(":forge:mc-${minecraft_version.replace(".", "-")}") != null
    ext['fuse_neoforge'] = findProject(":neoforge:mc-${minecraft_version.replace(".", "-")}") != null

    fuseJar {

        mergeServiceFiles()

        if (fuse_fabric) {
            includeJar {
                source project(":fabric:mc-${minecraft_version.replace(".", "-")}")
                task 'remapJar'
            }
        }

        if (fuse_forge) {
            includeJar {
                source project(":forge:mc-${minecraft_version.replace(".", "-")}")
                task 'shadowJar'
            }
        }

        if (fuse_neoforge) {
            includeJar {
                source project(":neoforge:mc-${minecraft_version.replace(".", "-")}")
                task 'shadowJar'
            }
        }

    }

    apply from: '../../gradle/publishing/modrinth.gradle'

    version = mod_version
    group = "${mod_group_id}"

    base {
        archivesName = "${mod_id}-${minecraft_version}"
    }

    def parts = "${project.minecraft_version}".split('\\.')
    def versionCode = parts[0].toInteger() * 1000 + parts[1].toInteger() * 10 + (parts.size() > 2 ? parts[2].toInteger() : 0)
    def useJava17Ports = versionCode < 1205

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21

        if (useJava17Ports) {
            sourceCompatibility = JavaVersion.VERSION_17
            targetCompatibility = JavaVersion.VERSION_17
        }
    }

    assemble {
        dependsOn fuseJar
    }

    fuseJar {
        dependsOn jar
        archiveClassifier.set('')
    }

    modrinth {
        uploadFile = fuseJar.archiveFile
    }

    def order = parent.subprojects.toList().indexOf(it);
    if (order != 0) {
        tasks.modrinth.dependsOn(parent.subprojects[order - 1].tasks.modrinth)
    }

}
