plugins {
    id 'net.minecraftforge.gradle' version "[${forge_gradle_version},6.2)" apply false
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'io.github.goooler.shadow'

    ext {
        minecraft_version_earliest = "${project.minecraft_version_list}".split(",")[0]
        minecraft_version_range = "[${project.minecraft_version_earliest},)"
        forge_version_range = "[0,)"
        loader_version_range = "[0,)"
        mapping_channel = "official"
        mapping_version = project.minecraft_version
    }

    version = "${mod_version}"
    group = "${mod_group_id}.forge"

    base {
        archivesName = "${mod_id}-${loader_name}-${minecraft_version}"
    }

    def isJava17Ports = "${project.minecraft_version}".replace(".", "").toInteger() < 1205

    java {
        withSourcesJar()
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21

        if (isJava17Ports) {
            sourceCompatibility = JavaVersion.VERSION_17
            targetCompatibility = JavaVersion.VERSION_17
        }
    }

    dependencies {
        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

        implementation project(':common')
        shadow project(':common')

        compileOnly project(':plugins:open-pac-plugin')
        compileOnly project(':plugins:ftb-chunks-plugin')

        annotationProcessor 'com.google.auto.service:auto-service:1.1.1'
        compileOnly 'com.google.auto.service:auto-service:1.1.1'

        implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    }

    minecraft {
        mappings channel: mapping_channel, version: mapping_version
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        copyIdeResources = true
        runs {
            configureEach {
                workingDirectory project.file('run')
                property 'forge.logging.markers', 'REGISTRIES'
                property 'forge.logging.console.level', 'debug'
            }

            client {
                property 'forge.enabledGameTestNamespaces', mod_id
                mods {
                    "${mod_id}" {
                        source sourceSets.main
                        source project(":api").sourceSets.main
                        source project(":common").sourceSets.main
                    }
                }
            }

            server {
                property 'forge.enabledGameTestNamespaces', mod_id
                args '--nogui'
                mods {
                    "${mod_id}" {
                        source sourceSets.main
                        source project(":api").sourceSets.main
                        source project(":common").sourceSets.main
                    }
                }
            }

            gameTestServer {
                property 'forge.enabledGameTestNamespaces', mod_id
            }
        }
    }

    processResources {

        duplicatesStrategy = DuplicatesStrategy.INCLUDE

        var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version          : forge_version,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            mod_display_url        : mod_display_url,
            mod_sources_url        : mod_sources_url,
            mod_issues_url         : mod_issues_url,
        ]
        inputs.properties replaceProperties

        filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
            expand replaceProperties + [project: project]
        }

//        from "${parent.projectDir}/src/main/resources"
    }

    jar {
        manifest {
            attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
        finalizedBy 'reobfJar'
    }

    if (isJava17Ports) {
        reobf {
            shadowJar {
            }
        }
    }

    shadowJar {
        dependsOn 'reobfJar'
        configurations = [project.configurations.shadow]
        mergeServiceFiles()
        dependencies {
            exclude dependency('com.google.code.findbugs:jsr305')
        }
        relocate 'dev.huskuraft.effortless.vanilla', 'dev.huskuraft.effortless.forge'
        relocate 'com.electronwill.nightconfig', 'dev.huskuraft.effortless.api.nightconfig'

        exclude 'effortless.accesswidener'

        minimize()
        archiveClassifier.set('')

        if (isJava17Ports) {
            finalizedBy reobfShadowJar
        }
    }

}
