// It is recommended to define properties in a gradle.properties file
// See the companion file example at the bottom of this response.

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish' // From your original file
    id 'net.minecraftforge.gradle' version '[6.0,6.2)' // Your specified version range
}

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    // Use the modern toolchain syntax
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // Use properties for versions to make them easily configurable
    mappings channel: mapping_channel, version: mapping_version

    // This property is required for the template to function correctly.
    copyIdeResources = true

    // The access transformer file from your original config
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Standard run configurations, adapted from the example
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Your custom repositories have been preserved here.
    // ForgeGradle automatically adds Forge's Maven and Maven Central.
    mavenCentral()
    maven {
        name = 'Forge'
        url = uri('https://maven.minecraftforge.net/')
    }
    maven {
        url "https://cursemaven.com"
    }
    maven {
        name "ftbMavenReleases"
        url "https://maven.ftb.dev/releases"
    }
    maven {
        name = "Architectury"
        url = "https://maven.architectury.dev/"
    }
}

dependencies {
    // Use properties for Minecraft and Forge versions
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Your dependencies have been preserved below
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    annotationProcessor 'com.google.auto.service:auto-service:1.1.1'
    compileOnly 'com.google.auto.service:auto-service:1.1.1'

    implementation 'com.electronwill.night-config:core:3.6.7'
    implementation 'com.electronwill.night-config:toml:3.6.7'
    implementation 'com.electronwill.night-config:json:3.6.7'

    compileOnly 'io.netty:netty-all:4.1.109.Final'
    compileOnly 'org.slf4j:slf4j-api:2.0.13'

    compileOnly "curse.maven:open-parties-and-claims-636608:6242869"
}

// This block expands properties in your mods.toml and other resources
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version: forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors: mod_authors, mod_description: mod_description]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Configure the final JAR with a manifest and reobfuscation
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}