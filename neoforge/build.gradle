plugins {
    id 'net.neoforged.gradle.userdev' version "${neogradle_gradle_version}" apply false
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'net.neoforged.gradle.userdev'
    apply plugin: 'io.github.goooler.shadow'

    ext {
        minecraft_version_range = "[${project.minecraft_version},)"
        neo_version_range = "[0,)"
        loader_version_range = "[0,)"
        mapping_channel = "official"
        mapping_version = project.minecraft_version
    }

    version = "${mod_version}"
    group = "${mod_group_id}.neoforge"

    base {
        archivesName = "${mod_id}-${loader_name}-${minecraft_version}"
    }

    java {
        withSourcesJar()
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
        toolchain.languageVersion = JavaLanguageVersion.of(21)
    }

    dependencies {
        implementation "net.neoforged:neoforge:${neo_version}"

        implementation project(':common')

        shadow project(':common')

        annotationProcessor 'com.google.auto.service:auto-service:1.1.1'
        compileOnly 'com.google.auto.service:auto-service:1.1.1'

        implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    }

    minecraft {
        accessTransformers {
            file('src/main/resources/META-INF/neoforge.accesstransformer.cfg')
        }
        runs {
            configureEach {
                workingDirectory project.file('run')
                systemProperty 'forge.logging.markers', 'REGISTRIES'
                systemProperty 'forge.logging.console.level', 'debug'
            }

            client {
                systemProperty 'forge.enabledGameTestNamespaces', mod_id
            }

            server {
                systemProperty 'forge.enabledGameTestNamespaces', mod_id
                programArgument '--nogui'
            }

            gameTestServer {
                systemProperty 'forge.enabledGameTestNamespaces', mod_id
            }
        }
    }

    sourceSets.main.java {
        srcDir "${project(":api").projectDir}/src/main/java"
        srcDir "${project(":common").projectDir}/src/main/java"
    }

    processResources {

        duplicatesStrategy = DuplicatesStrategy.INCLUDE

        var replaceProperties = [
                minecraft_version      : minecraft_version,
                minecraft_version_range: minecraft_version_range,
                neo_version            : neo_version,
                neo_version_range      : neo_version_range,
                loader_version_range   : loader_version_range,
                mod_id                 : mod_id,
                mod_name               : mod_name,
                mod_license            : mod_license,
                mod_version            : mod_version,
                mod_authors            : mod_authors,
                mod_description        : mod_description,
                mod_display_url        : mod_display_url,
                mod_sources_url        : mod_sources_url,
                mod_issues_url         : mod_issues_url,
        ]
        inputs.properties replaceProperties

        filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
            expand replaceProperties + [project: project]
        }

    }

    jar {
        manifest {
            attributes([
                    'Specification-Title'     : mod_id,
                    'Specification-Vendor'    : mod_authors,
                    'Specification-Version'   : '1',
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_authors,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
        finalizedBy 'shadowJar'
    }

    shadowJar {
        configurations = [project.configurations.shadow]
        mergeServiceFiles()
        dependencies {
            exclude dependency('com.google.code.findbugs:jsr305')
        }
        relocate 'dev.huskuraft.effortless.vanilla', 'dev.huskuraft.effortless.neoforge'
        relocate 'com.electronwill.nightconfig', 'dev.huskuraft.effortless.api.nightconfig'

        minimize()
        archiveClassifier.set('')

    }

}
